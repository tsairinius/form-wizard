{"version":3,"sources":["hooks/useContactInfo.js","components/ContactForm/ContactForm.jsx","components/UserAvailability/TimeBlock.jsx","components/UserAvailability/UserAvailability.jsx","components/StyledContainer/StyledContainer.jsx","components/Breadcrumbs/Breadcrumbs.jsx","components/Wizard/Wizard.jsx","components/Message/Message.jsx","hooks/useAvailability.js","App.jsx","reportWebVitals.js","index.js"],"names":["useContactInfo","initialInfo","first","last","email","password","confirmPass","useState","contactInfo","setContactInfo","formErrors","setFormErrors","useEffect","updateFormErrors","checkForValidEmail","checkForPasswordMatch","isMatched","test","updateContactInfo","event","property","target","name","value","checkForValidForm","isValid","Object","values","some","clearForm","ContactForm","onChange","className","data-testid","htmlFor","type","id","errorToDisplay","firstError","keys","find","key","displayError","TimeBlock","isActive","readOnly","onClick","UserAvailability","availability","title","timeBlocks","isBlockActive","blockId","availabilityToIds","map","item","avail_day","avail_time","blocks","time","day","includes","updateAvailability","block","updatedAvailability","forEach","Number","timeBlocksToAvailability","temp","splice","StyledContainer","children","Breadcrumbs","stepLabels","currentStep","label","idx","Fragment","length","Wizard","onStepChange","canProgress","onSubmit","onCancel","submitName","setCurrentStep","numSteps","React","Children","count","isValidNumSteps","isLastStep","handleBreadcrumbClick","step","Array","isArray","child","index","disabled","Message","text","useAvailability","setAvailability","updatedAvail","clearAvailability","App","setCanProgress","shouldShow","message","showMessage","setShowMessage","updateCanProgress","isContactFormValid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93003e06.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useContactInfo = () => {\n    const initialInfo = {\n      first: \"\",\n      last: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPass: \"\"\n      }\n\n    const initialErrors = {\n      email: false,\n      password: false\n    }\n    \n    const [ contactInfo, setContactInfo ] = useState(initialInfo);\n    const [ formErrors, setFormErrors ] = useState(initialErrors);\n\n    useEffect(() => {\n      updateFormErrors();\n\n    }, [contactInfo])\n\n    const updateContactInfo = event => {\n        const property = event.target.name;\n        const value = event.target.value;\n  \n        setContactInfo({\n            ...contactInfo,\n            [property]: value\n        })\n    }\n\n    const updateFormErrors = () => {\n      setFormErrors({\n        email: !checkForValidEmail(),\n        password: !checkForPasswordMatch()\n      })\n    }\n  \n    const checkForCompleteForm = () => {\n      return !Object.values(contactInfo).some(value => value === \"\");\n    }\n  \n    const checkForValidForm = () => {\n      let isValid = true;\n      if (!checkForCompleteForm() || !checkForPasswordMatch()) {\n        isValid = false;\n      }\n  \n      return isValid;\n    }\n  \n    const checkForPasswordMatch = () => {\n      let isMatched = false;\n      if (contactInfo.password === contactInfo.confirmPass) {\n        isMatched = true;\n      }\n  \n      return isMatched;\n    }\n\n    const checkForValidEmail = () => {\n      const emailFormat = /@\\w{1,}\\.\\w{1,}/;\n      return (emailFormat.test(contactInfo.email) || contactInfo.email === \"\");\n    }\n\n    const clearForm = () => {\n      setContactInfo(initialInfo);\n    }\n\n    return {\n        contactInfo,\n        updateContactInfo, \n        formErrors,\n        checkForValidForm,\n        clearForm\n    }\n}\n\nexport default useContactInfo;\n\n\n","import React from 'react';\nimport './ContactForm.css';\n\nconst ContactForm = ({onChange, contactInfo, formErrors}) => {\n    const displayError = () => {\n        let errorToDisplay;\n        const firstError = Object.keys(formErrors).find(key => formErrors[key] === true);\n        if (firstError === \"email\") {\n            errorToDisplay = \"Invalid email\";\n        }\n        else if (firstError === \"password\") {\n            errorToDisplay = \"Password mismatch\";\n        }\n    \n        return (\n            <div className=\"error-messages\">\n                {errorToDisplay ? <p>{errorToDisplay}</p> : null}\n            </div>\n        )\n    }\n    \n    return (\n        <div>\n            <p className=\"user-instructions\">Please fill out all fields below</p>\n            <form data-testid=\"contact-form\" className=\"contact-form\">\n                <label htmlFor=\"first\">First</label>\n                <input type=\"text\" id=\"first\" name=\"first\" value={contactInfo.first} onChange={onChange}/>\n                <label htmlFor=\"last\">Last</label>\n                <input type=\"text\" id=\"last\" name=\"last\" value={contactInfo.last} onChange={onChange}/>\n                <label htmlFor=\"email\">Email</label>\n                <input type=\"text\" id=\"email\" name=\"email\" value={contactInfo.email} onChange={onChange} className={formErrors.email ? 'input-error' : null}/>\n                <label htmlFor=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" value={contactInfo.password} onChange={onChange} className={formErrors.password ? 'input-error' : null}/>\n                <label htmlFor=\"confirmPass\">Confirm Password</label>\n                <input type=\"password\" id=\"confirmPass\" name=\"confirmPass\" value={contactInfo.confirmPass} onChange={onChange} className={formErrors.password ? 'input-error' : null}/>\n            </form>\n            {displayError()}\n        </div>\n    )\n}\n\nexport default ContactForm;","import React from 'react';\nimport './TimeBlock.css';\n\nconst TimeBlock = ({id, isActive, readOnly, onClick}) => {\n    return (\n        <div data-testid={id} onClick={() => onClick(id)} className={`time-block ${isActive ? 'is-active' : ''} ${readOnly ? 'read-only' : ''}`}/>\n    )\n}\n\nexport default TimeBlock;","import React from 'react';\nimport TimeBlock from './TimeBlock';\nimport PropTypes from 'prop-types';\nimport './UserAvailability.css';\n\nconst UserAvailability = ({availability = [], readOnly = false, title, onChange}) => {\n    let timeBlocks = (function availToTimeBlocks() {\n        const availabilityToIds = availability.map(item => `${item.avail_day}${item.avail_time}`);\n     \n        let isBlockActive;\n        let blocks = [];\n        let blockId;\n        for (let time = 0; time < 3; time++){\n            for (let day = 0; day < 7; day++) {\n                blockId = `${day}${time}`;\n                isBlockActive = availabilityToIds.includes(blockId);\n                blocks = [...blocks, {id: `${day}${time}`, isActive: isBlockActive}]\n            }\n        }\n\n        return blocks;\n    })();\n\n    const timeBlocksToAvailability = () => {\n        let updatedAvailability = [];\n        timeBlocks.forEach(block => {\n            if (block.isActive) {\n                updatedAvailability = [\n                    ...updatedAvailability,\n                    {\n                        avail_day: Number(block.id[0]),\n                        avail_time: Number(block.id[1])\n                    }\n                ]\n            }\n        });\n\n        return updatedAvailability;\n    }\n\n    const updateAvailability = (blockId) => {\n        if (!readOnly) {\n            timeBlocks = timeBlocks.map(block => {\n                            if (block.id === blockId) {\n                                return {\n                                    ...block,\n                                    isActive: !block.isActive\n                                }\n                            }\n                            return block;\n                        })\n\n            onChange(timeBlocksToAvailability());\n        }\n    }\n\n    const renderTimeLabelsAndBlocks = () => {\n        const timeLabelsAndBlocks = (() => {\n            let temp = [...timeBlocks];\n            temp.splice(0, 0, 'Morning');\n            temp.splice(8, 0, 'Afternoon');\n            temp.splice(16, 0, 'Evening');\n            return temp;\n        })();\n\n        return timeLabelsAndBlocks.map(item => {\n            if (typeof item === \"string\") {\n                return <div className=\"time-of-day\" key={item}>{item}</div>\n            }\n            else {\n                return <TimeBlock readOnly={readOnly} key={item.id} id={item.id} isActive={item.isActive} onClick={updateAvailability}/>;\n            }\n        })\n    }\n\n    return (\n        <div className=\"user-availability\">\n            {title ? <h4>{title}</h4> : null}\n            <div className='availability-table'>\n                    <div></div>\n                    <div>Mon</div>\n                    <div>Tue</div>\n                    <div>Wed</div>\n                    <div>Thu</div>\n                    <div>Fri</div>\n                    <div>Sat</div>\n                    <div>Sun</div>\n                    {renderTimeLabelsAndBlocks()}\n            </div>\n        </div>\n    )\n};\n\nUserAvailability.propTypes = {\n    availability: PropTypes.arrayOf(PropTypes.exact({\n                    avail_day: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6]).isRequired,\n                    avail_time: PropTypes.oneOf([0, 1, 2]).isRequired\n    })).isRequired,\n    onChange: PropTypes.func.isRequired\n}\n\nexport default UserAvailability;\n\n\n","import React from 'react';\nimport './StyledContainer.css';\n\nconst StyledContainer = ({children, className}) => {\n    return (\n        <div className={`styled-container ${className ? className : \"\"}`}>\n            {children}\n        </div>\n    )\n}\n\nexport default StyledContainer;","import React from 'react';\nimport './Breadcrumbs.css';\n\nconst Breadcrumbs = ({stepLabels, currentStep}) => {\n\n    return (\n        <div data-testid=\"breadcrumbs\" className='breadcrumbs'>\n            {stepLabels.map((label,idx) => \n                <React.Fragment key={`${label}-${idx}`}>\n                    <h3 className={(idx === currentStep) ? 'active-step' : null}>{label}</h3> \n                    {(idx < stepLabels.length - 1) ? <h3 className='breadcrumb-slash'> / </h3> : null}\n                </React.Fragment>\n            )}\n        </div>\n    )\n\n}\n\nexport default Breadcrumbs;","import React, { useState, useEffect } from \"react\";\nimport Breadcrumbs from '../Breadcrumbs';\nimport PropTypes from 'prop-types';\nimport './Wizard.css';\n\nconst Wizard = ({onStepChange, canProgress = true, children, onSubmit, onCancel, stepLabels, title, submitName='Submit'}) => {\n    const [ currentStep, setCurrentStep ] = useState(0);\n    const numSteps = React.Children.count(children);\n    const isValidNumSteps = numSteps > 0;\n    const isLastStep = (currentStep >= (numSteps - 1)) && isValidNumSteps;\n\n    useEffect(() => {\n        if (onStepChange) {\n            onStepChange(currentStep);\n        }\n    }, [currentStep])\n\n    const showCurrentStep = () => React.Children.map(children, (child, index) => index === currentStep ? child : null)\n\n    const showNextButton = () => {\n        const nextStep = () => {\n            if (!isLastStep) {\n                setCurrentStep(currentStep + 1);\n            }\n        }\n\n        return !isLastStep ? <button disabled={!canProgress} className='next-button primary' onClick={nextStep}>Next</button> : null\n    }\n\n    const showBackButton = () => {\n        const prevStep = () => {\n            if (currentStep > 0) {\n                setCurrentStep(currentStep - 1)\n            }\n        }\n\n        return (currentStep > 0 ? <button className='back-button secondary' onClick={prevStep}>Back</button> : null)\n    }\n\n    const showSubmitButton = () => {\n        return isLastStep ? <button disabled={!canProgress} className='submit-button primary' onClick={onSubmit}>{submitName}</button> : null\n    }\n\n    const showBreadcrumbs = () => {\n        return (Array.isArray(stepLabels) && stepLabels[0]) ?\n            <React.Fragment>\n                <Breadcrumbs onClick={handleBreadcrumbClick} stepLabels={stepLabels} currentStep={currentStep} />\n            </React.Fragment>\n            : null\n    }\n\n    const handleBreadcrumbClick = (step) => {\n        setCurrentStep(step);\n    }\n\n    return (\n        isValidNumSteps ? \n            <div className=\"wizard\">\n                <div className='wizard-header'>\n                    <h1>{title}</h1>\n                </div>\n\n                <hr/>\n\n                <div className='wizard-body'>\n                    {showBreadcrumbs()}\n                    <div>\n                        {showCurrentStep()}\n                    </div>\n                </div>\n\n                <hr/>\n\n                <div className='wizard-buttons'>\n                    <button className='cancel-button secondary' onClick={onCancel}>Cancel</button>\n                    {showBackButton()}\n                    {showNextButton()}\n                    {showSubmitButton()}\n                </div>\n            </div>\n            :\n            null\n    )\n}\n\nWizard.propTypes = {\n    stepLabels: PropTypes.arrayOf(PropTypes.string.isRequired)\n}\n\nexport default Wizard;\n","import StyledContainer from \"../StyledContainer\";\nimport \"./Message.css\";\n\nconst Message = ({text, onSubmit}) => {\n    return (\n        <StyledContainer className={\"message-container\"}>\n            <h2 className=\"message-text\">{text}</h2>\n            <button className=\"primary\" onClick={onSubmit}>Return to form</button>\n        </StyledContainer>\n    )\n};\n\nexport default Message;","import { useState } from \"react\";\n\nconst useAvailability = () => {\n    const [ availability, setAvailability ] = useState([]);\n\n    const updateAvailability = (updatedAvail) => {\n        setAvailability(updatedAvail);\n    }\n\n    const clearAvailability = () => {\n        setAvailability([]);\n    }\n\n    return {\n        availability,\n        updateAvailability,\n        clearAvailability\n    }\n}\n\nexport default useAvailability;","import React, { useEffect, useState } from 'react';\nimport useContactInfo from './hooks/useContactInfo';\nimport ContactForm from './components/ContactForm';\nimport UserAvailability from './components/UserAvailability';\nimport StyledContainer from './components/StyledContainer';\nimport Wizard from './components/Wizard';\nimport Message from './components/Message';\nimport './App.css';\nimport useAvailability from './hooks/useAvailability';\n\nfunction App() {\n  const { contactInfo,\n          updateContactInfo, \n          formErrors,\n          checkForValidForm,\n          clearForm\n        } = useContactInfo();\n\n  const { availability,\n          updateAvailability,\n          clearAvailability\n        } = useAvailability();\n\n  const [ canProgress, setCanProgress ] = useState(true);\n  const [ currentStep, setCurrentStep ] = useState(0);\n  const [ showMessage, setShowMessage ] = useState({shouldShow: false, message: \"\"});\n\n  useEffect(() => {\n    updateCanProgress();\n  }, [contactInfo, availability, currentStep]);\n\n  const updateCanProgress = () => {\n    switch(currentStep) {\n      case 0: \n        const isContactFormValid = checkForValidForm();\n        setCanProgress(isContactFormValid);\n        break;\n\n      case 1: \n        setCanProgress(availability.length > 0);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const returnToForm = () => {\n    clearForm();\n    clearAvailability();\n    setShowMessage({shouldShow: false, message: \"\"});\n  }\n\n  const submitForm = () => setShowMessage({shouldShow: true, message: \"You completed the demo!\"});\n\n  const cancelForm = () => setShowMessage({shouldShow: true, message: \"You exited the demo!\"});\n\n  const getCurrentStep = currentStep => setCurrentStep(currentStep);\n\n  return (\n    <div className=\"form-wizard-app\">\n      {showMessage.shouldShow ? \n      <Message text={showMessage.message} onSubmit={returnToForm}/>\n      :\n      <StyledContainer className={\"wizard-container\"}>\n        <Wizard canProgress={canProgress} onCancel={cancelForm} onSubmit={submitForm} onStepChange={getCurrentStep} title=\"Signup\" stepLabels={[\"Contact info\", \"Availability\"]}> \n          <ContactForm onChange={updateContactInfo} contactInfo={contactInfo} formErrors={formErrors}/> \n          <div>\n            <p className={\"user-instructions\"}>Please provide your availability below</p>\n            <UserAvailability availability={availability} onChange={updateAvailability}/>\n          </div>\n        </Wizard>\n      </StyledContainer>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}